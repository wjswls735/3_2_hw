P#3 사목게임

사목게임이란 두 플레이어가 번갈아가며 특정 세로줄에 마커를 떨어뜨려, 가로,세로,대각선 어느 방향이든 4개의 마커를 연속적으로 배열하면 승리하는 게임이다.

이러한 게임을 구현하기 위해서는 몇 가지 구현해야할 기능을 정의해야한다.

1) 게임판 구현
2) 게임판에 사용할 배열의 초기화
3) 매번 마커를 집어넣을 때 마다 화면에 초기화
4) 마커를 집어넣었을 경우 실제로 배열에 데이터가 들어가게해주는 기능
5) 다음 플레이어로 넘어가게 해주는 기능
6) 승리 계산
7) 게임 확장을 통한 비기기 구현
8) 심판자의 add block으로 인한 배열 초기화

이렇게 크게는 8가지의 기능을 구현해야한다. 

순서대로 구현전략을 세워보자.

1) 게임판 구성
: 게임판의 구성은 기본적으로 모니터 화면에 출력되게된다. 즉 계속해서 게임판 출력이 데이터가 새로 들어갈 때마다 
기존에 그려진 데이터 아래에 게임판이 그려지는 것이 아닌 고정된 게임판안에서 데이터가 입출력되는 것을 봐야한다. 
그렇기 때문에 우리는 계속해서 같은 곳에서 게임판을 그릴 수 있도록 좌표를 고정시켜줘야한다. 
그래서 gotoxy()함수를 만들어서 같은 곳에 게임판을 그려주게 해야한다.
게임판을 고정시키기위한 좌표를 설정해주었다면 실제 게임판을 구성해야한다. 
게임판의 구성은 가로 7 세로 7의 게임판임으로 이중 for문을 사용해서 그려주면 게임판이 완성되게 된다.

2) 게임판에 사용할 배열의 초기화
: 게임판은 2차원이기 때문에 그에 상응하는 배열을 생성해야한다.  우리가 이번에 사용할 것은 2차원 char형 배열으로
게임판 안에 들어갈 데이터를 저장하고 프린트하는 데 필요한 배열이다. 
맨 처음 배열을 생성하고 게임판에 제대로 그리기위해 이중 for문을 사용하여 모든 데이터에 빈값과 같은 역할을 하는 '_'을 넣어준다. 그렇게 되면 게임판을 그렸을 때 원하는 그림판이 나오며, 기본적인 게임판을 그리는 것은 다 한 것이라고 할 수 있다.

3) 매번 마커를 집어넣을 때 마다 화면 초기화
: 게임판은 아래로 그려지는 것이 아니고 고정되어있기 때문에 system(clear)를 사용해서 화면을 지워준다. 

4) 마커를 집어넣었을 경우 실제로 배열에 데이터가 들어가게 해주는 기능
: insert data라는 이 기능은 실제 우리가 만든 char 배열에 각각의 플레이어가 사용하는 데이터를 넣어야한다. 
그러기 위해서는 플레이어가 몇 번째 column인지 scanf를 통해서 받아오는데 그 받아온 숫자를 기준으로 for을 통해 비어있는 공간을 찾고 비어있다면 데이터를 삽입하게 구현한다.

5) 다음 플레이어로 넘어가게 해주는 기능
: 기존의 플레이어가 마커를 넣었다면 그 다음 플레이어에게로 기회가 넘어가야한다. 그래서 각 플레이어들의 데이터를 고정시켜서 포인터로 받아온뒤 다음플레이어를 정하는 방식으로 구현했다.

6) 승리 계산
: 승리 계산이 이 게임의 포인트인 만큼 구현하기 복잡하다. 
일단 승리 조건은 가로, 세로, 대각선 어느 방향이든 4개의 마커를 연속적으로 배열하면 이기게된다. 
그래서 각 턴마다 들어온 마커를 기준으로 가로, 세로,  대각선( y=x , y=-x) 총 4번의 검사가 필요하다.
각 들어온 마커는 row 와 column을 가지고 들어오는데 그 좌표를 바탕으로하여 그 데이터랑 다른 데이터가 나올때가지 왼쪽방향으로 밀어넣은 후 거기에서부터 오른쪽방향으로 
진행시킨다. 진행시키면서 기존에 들어온 데이터랑 다른 데이터가 나올 때까지 카운트를 올리면서 진전시킨다. 그랬을 때의 
카운트의 갯수가 4개이상이라면 승리하게 된다. 세로 방향은 좌표를 위쪽 방향으로 밀어넣은뒤 시작한다.

7) 게임 확장을 통한 비기기 구현
: 비기기 구현의 경우 각각의 데이터가 들어올 때마다 배열을 새롭게 두개 만들어서 기존의 데이터를 담아두던 char 형 배열을 복사해 가져온다 .
그후 두개의 배열에 각각의 플레이어들의 data를 빈공간이 있는 부분에 다 넣어놓고 승리계산 함수를 사용해서 승리가 나오는 지 검사한다.
그래서 두개의 플레이어 모두 비기는 경우가 나올 경우에만 비기게 만들어준다.

8) 심판자의 add block으로 인한 배열 초기화
심판자는 각각의 배열에 X값을 넣어 벽을 만드는 역할을 한다. 이 벽은 데이터가 들어가지 못하는 데이터임으로 플레이어들이 
마카를 넣었을 경우 X값을 대체해서 들어가는 것이 아니라 그 위에 쌓아져야한다.
데이터를 넣을경우는 insert data함수를 통해 넣지만 플레이어들은 X자리에는 데이터를 못넣게 해야한다.


이렇게 총 8가지의 기능을 구현해서 사목게임을 만들었다.

아래는 메인 함수를 가져다 놓았고 
메인 함수에서 사용되는 함수들은 위에서 설명한 8가지의 기능을 모아놓은 함수들이다. 

int main(){
    int col_number;
    int row_number;
    int player=1;
    char data='0';
    int finish=0;
    clear_borad();
    add_block();
    while(1){

        system("clear");
        draw_borad();
        if(finish==1 || finish==2){
            next_player(&player, &data);
            print_msg(player, finish);
            return 0;
        }   
    
        col_number=print_msg(player, finish);
        row_number = insert_data(col_number, data);
        finish=check_board(map, col_number, row_number, &data);
    
        if(finish==0){
            finish=check_draw();
        }   
        next_player(&player, &data);
    }   
    return 0;
}





