P4의 게임은 두 플레이어가 번갈아가며 게임판에 블록을 채워넣는 게임이다. 

기본적으로 게임판은 칸수가 9*9 개 형태로 구성되어있고 그 게임판에 블럭을 채워넣는 형식이다.

우리가 이 게임을 만들기 위해서 필요한 기능들은 크게 7개정도로 나뉘어진다.

7개를 나눠본다면 

1. 게임판 초기화 및 게임판 그리기
2. 각 플레이할 턴의 사용할 블럭 만들기
3. 플레이어가 블럭을 놓고자하는 좌표받기
4. 플레이어가 적은 좌표에 블럭 껴넣기
5. 사용한 블럭 초기화
6. 다음 플레이어 불러오기
7. 각 턴마다 누가 이겼는지 확인하기

이렇게 나눌수 있다. 

이 단계를 설명하기전에 구현에 필요한 struct를 설명하려고한다.

각 플레이어는 player라는 구조체를 만들어놓고있으며 
그 안에 인자로는 각종 flag들이 존재한다. 
struct player{
    int check_win;      //이겼는지를 확인시켜주는 
    char name;          //플레이어의 이름
    char xy[4];         //플레이어가 입력한 좌표
    char p_block[9];    //플레이어턴의 블럭의 모양
    char my_char;       //플레이어의 깃발
    bool my_turn;       //플레이어의 턴인지 확인
    bool win_flag;      //플레이어가 최종적으로 이겻는지 확인
    bool accept;        //플레이어의 블럭이 게임판에 들어갈 수 있는지 여부 확인
    bool total_accept;  //게임판에 추가적으로 블럭이 들어갈 수 있는지 여부 확인
}

이러한 구조체를 바탕으로 각 단계를 설명하려고한다. 

1. 게임판 초기화 및 게임판 그리기
게임판 초기화의 경우 전역 변수로 설정된 2차원배열을 '_'으로 전부 초기화시켜주면된다.
initBoard()에 구현되어있다.

게임판을 그리는 것은 쉽다. 게임판에 사용할 배열을 전역으로 설정해놓고 
반복문을 통해서 자신이 원하는 모양의 게임판을 그리면된다. 
이 부분은 drawBoard()에 구현되어있다.

2. 각 플레이할 턴의 사용할 블럭 만들기

각 플레이어는 이번 턴에 사용할 블럭을 받아와야한다. 이 때 받아와야할 블럭은 14가지의 종류중에서
랜덤하게 선택되어진다. 
일단 기본적으로 난수를 발생시켜 1~14까지중 하나의 수를 발생시킨다.
이 발생된 숫자로 블럭의 모양이 결정됨으로 
1~14까지의 수들은 각각 하나씩 블럭 모양과 맵핑을 시켜놓고
그 난수가 불리면 각플레이어의 구조체안에 블럭의 모양을 결정시키는 p_block[9]에 저장하면된다.

여기서 가변인자를 사용해서 각 모양들을 결정해주고 그 난수가 들어올때마다 그에 해당하는 블럭을 넣어주면 된다.

3. 플레이어가 블럭을 놓고자하는 좌표받기

이 좌표는 string형태로 받아와야해서 gets로 받아왔다. 
이 때 받아온 좌표는 ASCII로 받아오기 때문에 이 문자를 정수로 바꿔줘야한다. 
그래서 각 y좌표와 x좌표를 따로 받아서 정수로 만들어야하기 때문에 strtok로 끊어서 가져온 뒤
그것을 정수로 바꾸는 형태로 해야한다. 

여기서 또 중요한 것은 모든 블럭은 돌릴수 있게 해놔야하기 때문에 y,x좌표가 들어오는 것이 아닌 0이 들어온다면
시계방향으로 90' 회전시켜야한다. 

하지만 블럭을 저장한 배열이 일차원 배열이기 때문에 구조를 2차원 배열로 생각하며 각 숫자를 할당해줘야한다.

실제 배열은 1 2 3 4 5 6 7 8 9 로 되어 있겠지만 

2차원으로 생각하여 

1 2 3
4 5 6
7 8 9

으로 생각하면된다. 그래서 무조건 시계방향으로 90'회전이기 때문에 규칙은 간단하다.

(1 cycle)
1 -> 3 , 2 -> 6, 3 -> 9, 6 -> 8, 9 -> 7, 8 -> 4, 7 -> 1, 4 -> 2
가는 경우의 반복이다. 

그래서 한번돌릴때 1 cycle를 반복시키면 각 블럭을 돌릴 수 있다.

4. 플레이어가 적은 좌표에 블럭 껴넣기

블럭을 껴놓는 부분은 아까 좌표를 정수로 불러오는 형태에서 시작한다. 
좌표는 알았으므로 그 좌표를 기준으로 블럭이 들어가는지 확인해야한다.

좌표를 기준으로 3*3 영역이 정해짐으로 그 영역만 확인하면 문제가 생기진 않는다. 

그래서 각 좌표를 확인해서 블럭이 들어갈수 있는 지 확인하고 만약 들어갈수 없다면 

그 좌표에는 들어갈수 없다는 것을 프린트해주고 다시 좌표를 받는 부분으로 돌아가면된다.

만약 새로 받은 좌표를 기준으로 블럭이 들어갈수있는 상황이라면 게임판에 그 블럭을 넣고 나오면된다.

5. 사용한 블럭 초기화

우리가 사용한 블럭은 내턴이 돌아왔을 때 생기는 블럭이랑 충돌이 없어야한다. 
그렇기 때문에 사용한 블럭이 p_block에 저장되어있으므로 그 블럭을 '_'로 초기화시켜준다.

6. 다음 플레이어 불러오기

플레이어가 자신의 턴이 끝낫다면 자신의 my_turn flag를 false로 바꿔준뒤 다음 플레이어의 my_turn flag를 true로
바꿔주면 된다. 

7. 각 턴마다 누가 이겼는지 확인하기

각 턴이 끝날때마다 그 다음턴에 블럭이 들어갈수 있는 자리가 남는지 검사를 해야한다. 

그래서 만약 자리가 없다면 게임이 종료되어야한다. 

이부분은 9*9 행렬을 3*3 행렬로 겹치게 놓을수 있는 모든 수를 검사해야한다. 

한줄에 7개씩 겹쳐서 넣을 수 있으므로 총 49개의 검사를 시작하게된다.

이때 검사방식은 블럭을 넣을수 있을지 검사하는 방식으로 하며 이 모든 경우가 안되는 경우
check_win에 0을 넣은뒤 check_win에 0이 든 경우 게임을 종료시키고 

승자와 패자를 결정하면된다.

이렇게 7단계로 구현을 마무리하면 P4에서 원하는 게임을 구현할 수 있다.

























